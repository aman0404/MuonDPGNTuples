#define gemAnalysis_mwgr4_run337973_cxx
#include "gemAnalysis_mwgr4_run337973.h"
#include <TH2.h>
#include <TF1.h>
#include <TTree.h>
#include <TString.h>
#include <TStyle.h>
#include <TCanvas.h>
#include <iostream>
#include <string.h>

#include "vector"

gemAnalysis_mwgr4_run337973::gemAnalysis_mwgr4_run337973(const TString & inFileName,
                         const TString & outFileName) :
  m_inFile(inFileName,"READ"),m_outFile(outFileName,"RECREATE"),fChain(0)
{

  fChain = static_cast<TTree*>(m_inFile.Get("muNtupleProducer/MuDPGTree"));
  Init(fChain);

}

void gemAnalysis_mwgr4_run337973::Loop()
{

   if (fChain == 0) return;
   
   TCanvas *c = new TCanvas("c","canvas",800,800);

   //TFile *f1 = new TFile("MuDPGNtuple_MWGR4_eos.root","READ");
   //TFile *f1 = new TFile("gemAnalysis_cosmics/MWGR4_Run337973.root","READ");
   //TFile *f1 = new TFile("/lustre/cms/store/user/gmilella/Cosmics/CONDOR_gem_dpg_ntuple_mwgr4_run337973_eos20201116_1835/MWGRrun33797express.root","READ");
   std::cout << "File opened" << std::endl;

   Long64_t nentries = fChain->GetEntries();
   std::size_t i=0;
   vector<float> propagated_Glb_x;
   propagated_Glb_x.clear();
   vector<float> propagated_Glb_y;
   propagated_Glb_y.clear();

   vector<float> matched_Glb_2D;//_clsz_min2;
   matched_Glb_2D.clear();//_clsz_min2.clear();
   vector<float> residual_2D;//_clsz_min2;
   residual_2D.clear();//_clsz_min2.clear();
   
   vector<float> matched_Glb_x;
   matched_Glb_x.clear();
   vector<float> matched_Glb_y;
   matched_Glb_y.clear();
   
   /*vector<float> matched_Glb_x_clsz_eq2;
   matched_Glb_x_clsz_eq2.clear();
   vector<float> residual_x_clsz_eq2;
   residual_x_clsz_eq2.clear();
   vector<float> matched_Glb_x_clsz_maj2;
   matched_Glb_x_clsz_maj2.clear();
   vector<float> residual_x_clsz_maj2;
   residual_x_clsz_maj2.clear();*/
   

   book();
   
   Long64_t nbytes = 0, nb = 0;
   for (Long64_t jentry=0; jentry<nentries;jentry++) {
      Long64_t ientry = fChain->LoadTree(jentry);
      if (ientry < 0) break;
      fChain->GetTree()->GetEntry(ientry);
      nb = fChain->GetEntry(jentry);   nbytes += nb;
      // if (Cut(ientry) < 0) continue;
         
      if(mu_propagatedGlb_z->size() !=0 )//&& gemRecHit_g_x->size() != 0 )
	 {
	   //if(gemRecHit_cluster_size->size() < 2 && gemRecHit_cluster_size->size() != 0)
	   bool flag = false;
	   for(std::size_t j=0; j < mu_propagatedGlb_z->size(); j++)
	     {
	       if(mu_propagatedGlb_z->at(j) < 0 ) flag = true;
	     }

	   if(flag == true)
	       {
		 for(std::size_t j=0; j< mu_propagatedGlb_x->size(); j++ )
		   {
		     propagated_Glb_x.push_back(mu_propagatedGlb_x->at(j));
		   }
		 for(std::size_t j=0; j< mu_propagatedGlb_y->size(); j++ )
		   {
		     propagated_Glb_y.push_back(mu_propagatedGlb_y->at(j));
		   }
	       }
	 
	   const char x = 'x';
	   const char y = 'y';
	   vector<float> matched_x = findMatchedHit(gemRecHit_g_x,gemRecHit_g_y,mu_propagatedGlb_x, mu_propagatedGlb_y,x);
	   vector<float> matched_y = findMatchedHit(gemRecHit_g_x,gemRecHit_g_y,mu_propagatedGlb_x, mu_propagatedGlb_y,y);
	   i=0;
	   if(matched_x.size() != 0)
	     {
	       while(i< matched_x.size())
		 {
		   //matched_Glb_x.push_back(matched_2D.at(i));
		   matched_Glb_x.push_back(matched_x.at(i));
		   i++;
		 }
	     }
	   i=0;
	   if(matched_y.size() != 0)
	     {
	       while(i< matched_y.size())
		 {
		   //matched_Glb_x.push_back(matched_2D.at(i));
		   matched_Glb_y.push_back(matched_y.at(i));
		   i++;
		 }
	     } 
	 
      
	   vector<float> res_2D = residual2D(gemRecHit_g_x,gemRecHit_g_y,mu_propagatedGlb_x, mu_propagatedGlb_y);
	   //vector<float> res_x = residual(gemRecHit_g_x,gemRecHit_g_x->size(),mu_propagatedGlb_x, mu_propagatedGlb_x->size());
	   i=0;
	   if(res_2D.size() != 0)
	     {
	       while(i< res_2D.size()){
		 residual_2D.push_back(res_2D.at(i));
		 i++;
	       }
	     }
	 }
      
      for(std::size_t iRecDigi = 0; iRecDigi < gemRecHit_nRecHits; ++ iRecDigi)
	{
	  if(gemRecHit_g_z->at(iRecDigi) < -569)
	    {
	      Double_t rec_x = gemRecHit_g_x->at(iRecDigi);
	      Double_t rec_y = gemRecHit_g_y->at(iRecDigi);
	      m_plots["OccupancyRecHit2D12"]->Fill(rec_x,rec_y);
	    }
	  if(gemRecHit_g_z->at(iRecDigi) >= -569 && gemRecHit_g_z->at(iRecDigi) <= 0)
            {
	      Double_t rec_x = gemRecHit_g_x->at(iRecDigi);
	      Double_t rec_y = gemRecHit_g_y->at(iRecDigi);
	      m_plots["OccupancyRecHit2D11"]->Fill(rec_x,rec_y);
            }
	}
      m_plots["OccupancyRecHit2D11"]->GetZaxis()->SetRangeUser(0,16500000);
      m_plots["OccupancyRecHit2D12"]->GetZaxis()->SetRangeUser(0,16500000);
   }

   //TF1 *gauss = new TF1("gauss", "gaus", -0.5, .5);
   
   for(std::size_t iSize=0; iSize< residual_2D.size(); iSize++)
     {
       m_plots["ResidualPlot2D"]->Fill(residual_2D.at(iSize));
     }

   for(std::size_t iSize=0; iSize < propagated_Glb_x.size(); iSize++)
     {
       m_plots["PropagatedGlbX"]->Fill(propagated_Glb_x.at(iSize)); 
     }
   for(std::size_t iSize=0; iSize < propagated_Glb_y.size(); iSize++)
     {
       m_plots["PropagatedGlbY"]->Fill(propagated_Glb_y.at(iSize));
     }

   for(std::size_t iSize=0; iSize < propagated_Glb_y.size(); iSize++)
     {
       m_plots["OccupancyPropagated2D"]->Fill(propagated_Glb_x.at(iSize),propagated_Glb_y.at(iSize));
     }
   m_plots["OccupancyPropagated2D"]->GetZaxis()->SetRangeUser(0,16500000);
   m_plots["OccupancyPropagated2D"]->Draw("colz");

   for(std::size_t iSize=0; iSize < matched_Glb_y.size(); iSize++)
     {
       m_plots["OccupancyMatched2D"]->Fill(matched_Glb_x.at(iSize),matched_Glb_y.at(iSize));
     }
   m_plots["OccupancyPropagated2D"]->GetZaxis()->SetRangeUser(0,16500000);
   
   /*for(std::size_t iSize=0; iSize< residual_x_clsz_min2.size(); iSize++)
     {
       m_plots["ResidualPlotXCLSZMin2"]->Fill(residual_x_clsz_min2.at(iSize));
     }
   m_plots["ResidualPlotXCLSZMin2"]->Rebin(5);
   m_plots["ResidualPlotXCLSZMin2"]->Fit("gauss","R");

   for(std::size_t iSize=0; iSize< residual_x_clsz_eq2.size(); iSize++)
     {
       m_plots["ResidualPlotXCLSZEq2"]->Fill(residual_x_clsz_eq2.at(iSize));
     }
   m_plots["ResidualPlotXCLSZEq2"]->Rebin(5);
   m_plots["ResidualPlotXCLSZEq2"]->Fit("gauss","R");


   for(std::size_t iSize=0; iSize< residual_x_clsz_maj2.size(); iSize++)
     {
       m_plots["ResidualPlotXCLSZMaj2"]->Fill(residual_x_clsz_maj2.at(iSize));
     }
   m_plots["ResidualPlotXCLSZMaj2"]->Rebin(5);
   m_plots["ResidualPlotXCLSZMaj2"]->Fit("gauss","R");*/

   
   //fill_residual(residual_x_clsz_min2, residual_x_clsz_min2.size());
   //fill_matched(matched_Glb_x, matched_Glb_x.size());

      
   
     
   /*TString var[] = {"gemRecHit_g_x","gemRecHit_g_y"};
   TTree *tTree = (TTree*)f1->Get("MuDPGTree");
   
   int n = sizeof(var)/sizeof(var[0]);
   int nBins[n];
   int nEntries[n];
   TH1F *histo[n];
   TString binning;
   
   for(int i=0; i<n; i++){
     TString varname = var[i];
     TString s = std::to_string(i);
     
     if(varname=="gemRecHit_g_x") binning = "(100,-250.,250.)";
     if(varname=="gemRecHit_g_y") binning = "(100,-250.,250.)";
     
     tTree->Draw(varname+">>histo"+s+binning);
     
     histo[i] = (TH1F*)gDirectory->Get("histo"+s);
     
     nBins[i] = histo[i]->GetNbinsX();
     nEntries[i] = histo[i]->GetEntries();
     //std::cout << nBins << std::endl;
   }
   
   TH1F *histoRecHitGlbY = (TH1F*)histo[0]->Clone("OccupancyPlotRecHitY");
   histoRecHitGlbY->SetTitle("Occupancy Plot RecHit X");
   histoRecHitGlbY->GetXaxis()->SetTitle("global_y");
   c->cd();
   histoRecHitGlbY->Draw();
   
   TH1F *histoEff = (TH1F*)m_plots["OccupancyMatchedPlotX"]->Clone("histoEff");
   //histoEff->SetMinimum(0.5);
   //histoEff->SetMaximum(1.4);
   histoEff->Sumw2();
   histoEff->Divide(histo[0]);
   histoEff->SetMarkerStyle(21);
   histoEff->SetStats(0);
   histoEff->SetTitle("Efficiency matched/propagated");
   histoEff->GetXaxis()->SetTitle("global_x");
   c->cd();
   histoEff->Draw("ep");*/
  
   endJob();

}

vector<float> gemAnalysis_mwgr4_run337973::findMatchedHit(vector<float> *recHitPositions_x, vector<float> *recHitPositions_y, vector<float> *muPropagatedPositions_x, vector<float> *muPropagatedPositions_y, const char coord)
{

  float min_recHitPosition = 666; //DUMMY VALUE
  vector<float> min_recHitPositions;
  char coordx = 'x';
  char coordy = 'y';
  //recHitMatched.clear();
  
  for(std::size_t iMu = 0; iMu < muPropagatedPositions_x->size(); iMu++)
    {
      float min_residual = 100;
      for(std::size_t iRecHit = 0; iRecHit < recHitPositions_x->size(); iRecHit++)
	{
	  float residualx = std::fabs(muPropagatedPositions_x->at(iMu)-recHitPositions_x->at(iRecHit));
          float residualy = std::fabs(muPropagatedPositions_y->at(iMu)-recHitPositions_y->at(iRecHit));
	  float residual = TMath::Sqrt(TMath::Power(residualx,2)+TMath::Power(residualy,2));
	  if(residual <= min_residual)
	    {
	      min_residual = residual;
	      if (strcmp(&coord,&coordx) == 0)
		{
		  min_recHitPosition = recHitPositions_x->at(iRecHit);
		}
	      else if (strcmp(&coord,&coordy) == 0)
                {
                  min_recHitPosition = recHitPositions_y->at(iRecHit);
                }
	    }
	  else continue;
	}
      if(min_recHitPosition == 666) continue;
      else
	{
	  min_recHitPositions.push_back(min_recHitPosition);
	}  
    }

  return min_recHitPositions;

}


vector<float> gemAnalysis_mwgr4_run337973::residual2D(vector<float> *recHitPositions_x, vector<float> *recHitPositions_y, vector<float> *muPropagatedPositions_x, vector<float> *muPropagatedPositions_y)
{

  float min_recHitPosition = 666; //DUMMY VALUE
  vector<float> residuals;
  //recHitMatched.clear();

  for(std::size_t iMu = 0; iMu < muPropagatedPositions_x->size(); iMu++)
    {
      float min_residual = 100;
      for(std::size_t iRecHit = 0; iRecHit < recHitPositions_x->size(); iRecHit++)
        {
          float residualx = std::fabs(muPropagatedPositions_x->at(iMu)-recHitPositions_x->at(iRecHit));
          float residualy = std::fabs(muPropagatedPositions_y->at(iMu)-recHitPositions_y->at(iRecHit));
	  float residual = TMath::Sqrt(TMath::Power(residualx,2)+TMath::Power(residualy,2));
	  if(std::fabs(residual) <= std::fabs(min_residual))
            {
              min_residual = residual;
              min_recHitPosition = recHitPositions_x->at(iRecHit);
            }
          else continue;
        }
      if(min_recHitPosition == 666) continue;
      else
        {
          residuals.push_back(min_residual);
        }
    }
  
return residuals;

}



vector<float> gemAnalysis_mwgr4_run337973::residual(vector<float> *recHitPositions, size_t nRecHitPos, vector<float> *muPropagatedPositions, size_t nMuPropagatedPos)
{

  float min_recHitPosition = 666; //DUMMY VALUE
  vector<float> residuals;
  //recHitMatched.clear();

  for(std::size_t iMu = 0; iMu < nMuPropagatedPos; iMu++)
    {
      float min_residual = 100;
      for(std::size_t iRecHit = 0; iRecHit < nRecHitPos; iRecHit++)
        {
          float residual = (muPropagatedPositions->at(iMu)-recHitPositions->at(iRecHit));
          if(std::fabs(residual) <= std::fabs(min_residual))
            {
              min_residual = residual;
              min_recHitPosition = recHitPositions->at(iRecHit);
            }
          else continue;
        }
      if(min_recHitPosition == 666) continue;
      else
        {
          residuals.push_back(min_residual);
        }
    }

  return residuals;

}


void gemAnalysis_mwgr4_run337973::book()
{
  m_outFile.cd();

  m_plots["OccupancyMatchedPlotX"] = new TH1F("OccupancyMatchedPlotX",
					      "Occupancy Matched X; globalX ; entries",
					      100,-250.,250.);

  m_plots["ResidualPlotXCLSZMin2"] = new TH1F("ResidualPlotXCLSZMin2",
                                              "Residual X ClusterSize<2; residualX ; entries",
                                              400,-2,2.);
  m_plots["ResidualPlotXCLSZEq2"] = new TH1F("ResidualPlotXCLSZEq2",
                                              "Residual X ClusterSize=2; residualX ; entries",
                                              400,-2,2.);

  m_plots["PropagatedGlbX"] = new TH1F("PropagatedGlbX",
                                              "Propagated X; globalX ; entries",
                                              100,-250.,250.);

  m_plots["PropagatedGlbY"] = new TH1F("PropagatedGlbY",
                                              "Propagated Y; globalY ; entries",
                                              100,-250.,250.);

  m_plots["ResidualPlotXCLSZMaj2"] = new TH1F("ResidualPlotXCLSZMaj2",
                                              "Residual X ClusterSize>2; residualX ; entries",
                                              400,-2,2.);
  
  m_plots["ResidualPlot2D"] = new TH1F("ResidualPlot2D",
                                              "Residual 2D; residual2D ; entries",
                                              400,-2,2.);

  m_plots["OccupancyPropagated2D"] = new TH2F("OccupancyPropagated2D",
				       "Propagated 2D; globalX ; globalY",
					      100,-250.,250.,
					      100,-250.,250.);
  
  m_plots["OccupancyMatched2D"] = new TH2F("OccupancyMatched2D",
					      "Matched 2D; globalX ; globalY",
                                              100,-250.,250.,
                                              100,-250.,250.);

  m_plots["OccupancyRecHit2D11"] = new TH2F("OccupancyRecHit2D11",
					   "RecHit 2D GE11; globalX ; globalY",
					   100,-250.,250.,
					   100,-250.,250.);

  m_plots["OccupancyRecHit2D12"] = new TH2F("OccupancyRecHit2D12",
					    "RecHit 2D GE12; globalX ; globalY",
					    100,-250.,250.,
					    100,-250.,250.);

}

						   
void gemAnalysis_mwgr4_run337973::endJob()
{

  m_outFile.cd();
  m_outFile.Write();
  m_outFile.Close();

}


#include "MuDPGAnalysis/MuonDPGNtuples/src/MuNtupleGEMRecHitFiller.h"

#include "FWCore/Framework/interface/Event.h"
#include "FWCore/Framework/interface/EDAnalyzer.h"
#include "FWCore/Framework/interface/ESHandle.h"


MuNtupleGEMRecHitFiller::MuNtupleGEMRecHitFiller(edm::ConsumesCollector && collector,
					     const std::shared_ptr<MuNtupleConfig> config,
					     std::shared_ptr<TTree> tree, const std::string & label) :

  MuNtupleBaseFiller(config, tree, label)
{

  edm::InputTag &iTag = m_config->m_inputTags["gemRecHitTag"];
  if (iTag.label() != "none") m_rechit_token_ = collector.consumes<GEMRecHitCollection>(iTag);

}

MuNtupleGEMRecHitFiller::~MuNtupleGEMRecHitFiller()
{

};

void MuNtupleGEMRecHitFiller::initialize()
{
  
  m_tree->Branch((m_label + "_nRecHits").c_str(), &m_nRecHits, ("_nRecHits/i").c_str());

  m_tree->Branch((m_label + "_g_r").c_str(), &m_rechit_g_r);
  m_tree->Branch((m_label + "_g_phi").c_str(), &m_rechit_g_phi);
  m_tree->Branch((m_label + "_g_x").c_str(), &m_rechit_g_x);
  m_tree->Branch((m_label + "_g_y").c_str(), &m_rechit_g_y);
  m_tree->Branch((m_label + "_g_z").c_str(), &m_rechit_g_z);
 

}

void MuNtupleGEMRecHitFiller::clear()
{

  m_nRecHits = 0;
  
  m_rechit_g_r.clear();
  m_rechit_g_phi.clear();
  m_rechit_g_x.clear();
  m_rechit_g_y.clear();
  m_rechit_g_z.clear();
  
  
}

void MuNtupleGEMRecHitFiller::fill(const edm::Event & ev)
{
  
  clear();

  edm::Handle<GEMRecHitCollection> rechit_collection;
  ev.getByToken(m_rechit_token_,rechit_collection);
  const auto gem = m_config->m_gemGeometry; 
    
    if (rechit_collection.isValid())
      {
	
	for (auto rechit = rechit_collection->begin(); rechit != rechit_collection->end(); rechit++)
	  {
	    GEMDetId gem_id{rechit->gemId()};
	    
	    const BoundPlane& surface = gem->idToDet(gem_id)->surface();
	    GlobalPoint&& rechit_global_pos = surface.toGlobal(rechit->localPosition());

	    m_rechit_g_r.push_back(rechit_global_pos.perp());
	    m_rechit_g_phi.push_back(rechit_global_pos.phi());
	    m_rechit_g_x.push_back(rechit_global_pos.x());
	    m_rechit_g_y.push_back(rechit_global_pos.y());
	    m_rechit_g_z.push_back(rechit_global_pos.z());

	    m_nRecHits++;
	  }

      }

  return;

}
